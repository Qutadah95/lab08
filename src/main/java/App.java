import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.*;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public static void main(String[] args) {
        String urlApi = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        //// in this API there is some object dont have quoteAuthor
        sendGetRequest(urlApi);
    }

    static void sendGetRequest(String urlString) {
        try {
            StringBuilder createdLine = new StringBuilder();
            Gson gson = new Gson();
            URL url = new URL(urlString);
            HttpURLConnection connection = setUpConnectionObject(url);
            if (connection.getResponseCode() == 200) {
                BufferedReader input = getBufferedReaderFromConnection(connection);
                String line = input.readLine();
                ApiQuiry apiQuotes = gson.fromJson(line, ApiQuiry.class);
                System.out.println(apiQuotes);
                JsonObject quote1 = new JsonObject();
                quote1.addProperty("Author", apiQuotes.getQuoteAuthor());
                quote1.addProperty("Text", apiQuotes.getQuoteText());
                FileWriter fileToWrite = new FileWriter("src/main/java/Countact.json");
                fileToWrite.write(createdLine.toString());
                fileToWrite.close();
                input.close();
            }else {
                try {
                    FileReader jsonFile = new FileReader("src/main/java/Countact.json");
                    BookQuiry[] book = gson.fromJson(jsonFile, BookQuiry[].class);
                    System.out.println(book.length);
                    Random random = new Random();
                    int randomNumber = random.nextInt(142 - 1) + 1;
                    System.out.println(book[randomNumber]);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static HttpURLConnection setUpConnectionObject(URL url) throws IOException {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
        return connection;
    }

    static BufferedReader getBufferedReaderFromConnection(HttpURLConnection connection) throws IOException {
        InputStream inputStream = connection.getInputStream();
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader input = new BufferedReader(inputStreamReader);
        return input;
    }

}